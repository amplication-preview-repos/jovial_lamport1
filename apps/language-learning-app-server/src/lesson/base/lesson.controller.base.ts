/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LessonService } from "../lesson.service";
import { LessonCreateInput } from "./LessonCreateInput";
import { Lesson } from "./Lesson";
import { LessonFindManyArgs } from "./LessonFindManyArgs";
import { LessonWhereUniqueInput } from "./LessonWhereUniqueInput";
import { LessonUpdateInput } from "./LessonUpdateInput";
import { ProgressFindManyArgs } from "../../progress/base/ProgressFindManyArgs";
import { Progress } from "../../progress/base/Progress";
import { ProgressWhereUniqueInput } from "../../progress/base/ProgressWhereUniqueInput";

export class LessonControllerBase {
  constructor(protected readonly service: LessonService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Lesson })
  async createLesson(@common.Body() data: LessonCreateInput): Promise<Lesson> {
    return await this.service.createLesson({
      data: {
        ...data,

        course: data.course
          ? {
              connect: data.course,
            }
          : undefined,
      },
      select: {
        content: true,

        course: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Lesson] })
  @ApiNestedQuery(LessonFindManyArgs)
  async lessons(@common.Req() request: Request): Promise<Lesson[]> {
    const args = plainToClass(LessonFindManyArgs, request.query);
    return this.service.lessons({
      ...args,
      select: {
        content: true,

        course: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Lesson })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async lesson(
    @common.Param() params: LessonWhereUniqueInput
  ): Promise<Lesson | null> {
    const result = await this.service.lesson({
      where: params,
      select: {
        content: true,

        course: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Lesson })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLesson(
    @common.Param() params: LessonWhereUniqueInput,
    @common.Body() data: LessonUpdateInput
  ): Promise<Lesson | null> {
    try {
      return await this.service.updateLesson({
        where: params,
        data: {
          ...data,

          course: data.course
            ? {
                connect: data.course,
              }
            : undefined,
        },
        select: {
          content: true,

          course: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Lesson })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLesson(
    @common.Param() params: LessonWhereUniqueInput
  ): Promise<Lesson | null> {
    try {
      return await this.service.deleteLesson({
        where: params,
        select: {
          content: true,

          course: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/progresses")
  @ApiNestedQuery(ProgressFindManyArgs)
  async findProgresses(
    @common.Req() request: Request,
    @common.Param() params: LessonWhereUniqueInput
  ): Promise<Progress[]> {
    const query = plainToClass(ProgressFindManyArgs, request.query);
    const results = await this.service.findProgresses(params.id, {
      ...query,
      select: {
        completedAt: true,

        course: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        lesson: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/progresses")
  async connectProgresses(
    @common.Param() params: LessonWhereUniqueInput,
    @common.Body() body: ProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      progresses: {
        connect: body,
      },
    };
    await this.service.updateLesson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/progresses")
  async updateProgresses(
    @common.Param() params: LessonWhereUniqueInput,
    @common.Body() body: ProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      progresses: {
        set: body,
      },
    };
    await this.service.updateLesson({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/progresses")
  async disconnectProgresses(
    @common.Param() params: LessonWhereUniqueInput,
    @common.Body() body: ProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      progresses: {
        disconnect: body,
      },
    };
    await this.service.updateLesson({
      where: params,
      data,
      select: { id: true },
    });
  }
}
